[{"title":"kmp","date":"2017-08-08T17:50:56.000Z","path":"2017/08/09/kmp/","text":"KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt同时发现，因此人们称它为克努特——莫里斯——普拉特操作（简称KMP算法）。KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是实现一个next()函数，函数本身包含了模式串的局部匹配信息。时间复杂度O(m+n)。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495//// kmp.c// //// Created by LiveMac on 2017/8/8.////#include &lt;stdio.h&gt;#include &lt;string.h&gt;void get_next(char* T, int* next)&#123; int i = 1; int j = 0; next[1] = 0; while (i &lt; T[0]) &#123; if (j == 0 || T[i] == T[j]) &#123; i++; j++; if (T[i] != T[j]) &#123; next[i] = j; &#125; else &#123; next[i] = next[j]; &#125; &#125; else &#123; j = next[j]; &#125; &#125;&#125;int index_kmp(char* S, char* T, int pos)&#123; int i = pos; int j = 1; int next[255]; get_next(T, next); while(i &lt;= S[0] &amp;&amp; j &lt;= T[0]) &#123; if (j == 0 || S[i] == T[j]) &#123; i++; j++; &#125; else &#123; j = next[j]; &#125; &#125; if (j &gt; T[0]) &#123; return i - T[0]; &#125; else &#123; return 0; &#125;&#125;int main()&#123; char S[255] = &quot; aasssbbsdfdsfas&quot;; S[0] = strlen(S) - 1; char T[255] = &quot; sssb&quot;; char Input[255]; int pos = 1; printf(&quot;check[%s][%d], please input substr:\\n&quot;, S, S[0]); while(1) &#123; scanf(&quot;%s&quot;,Input); int i = 0; while(Input[i] != &apos;\\0&apos;) &#123; T[i+1] = Input[i]; i++; &#125; T[i+1] = &apos;\\0&apos;; T[0] = strlen(T) - 1; printf(&quot;Input[%s][%lu] -&gt; T[%s][%lu][%d]\\n&quot;, Input, strlen(Input), T, strlen(T), T[0]); int ret = index_kmp(S, T, pos); if (ret) &#123; printf(&quot;[%s] has substr [%s] in pos [%d]\\n\\n&quot;, S, T, ret); &#125; else &#123; printf(&quot;[%s] no substr [%s]\\n\\n&quot;, S, T); &#125; &#125;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://hanchunyu.cn/tags/算法/"},{"name":"字符串","slug":"字符串","permalink":"http://hanchunyu.cn/tags/字符串/"}]},{"title":"Hello World","date":"2017-08-08T17:32:59.000Z","path":"2017/08/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]